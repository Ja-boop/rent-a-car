/// <reference types="Jest" />

const { Sequelize } = require('sequelize');
const CarsRepository = require('../orm/carsRepository');
const CarModel = require('../../model/carModel');
const CarEntity = require('../../entity/car');
const CarNotFoundError = require('../orm/error/carNotFoundError');
const CarIdNotDefinedError = require('../orm/error/carIdNotDefinedError');

const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type CarsRepository
 */
let repository;

const sampleCar = new CarEntity({
    brand: 'BMW',
    model: 'M3 GTR',
    imageUrl: '123',
    yearManufactured: 2000,
    kms: 150000,
    color: 'Red',
    airConditioner: false,
    passengers: 2,
    transmission: 'Manual',
    cost: 60000,
    lastUpdated: '2020-05-14T02:41:34Z',
});

beforeAll(() => {
    const car = CarModel.setup(sequelizeInstance);
    repository = new CarsRepository(car);
});

beforeEach(async (done) => {
    await sequelizeInstance.sync({ force:true });
    done();
});

test('Crea un auto cuando la entidad no tiene id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newCar = await repository.saveCar(sampleCar);
    expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Actualiza un auto cuando la entidad tiene un id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newCar = await repository.saveCar(sampleCar);
    expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);

    newCar.brand = 'BMW';
    const modifiedCar = await repository.saveCar(newCar);
    expect(modifiedCar.id).toEqual(NEW_AUTOGENERATED_ID);
    expect(modifiedCar.brand).toEqual('BMW');
});

test('Buscar un auto con ID', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newCar = await repository.saveCar(sampleCar);
    expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);

    const findCar = await repository.getCarById(1);
    expect(findCar.id).toEqual(newCar.id);
});

test('Traer todos los autos', async () => {
    const FIRST_AUTOGENERATED_ID = 1;
    const firstCar = await repository.saveCar(sampleCar);
    expect(firstCar.id).toEqual(FIRST_AUTOGENERATED_ID);

    const SECOND_AUTOGENERATED_ID = 2;
    const secondCar = await repository.saveCar(sampleCar);
    expect(secondCar.id).toEqual(SECOND_AUTOGENERATED_ID);

    const allCars = await repository.getAllCars();
    expect(allCars).toHaveLength(2);
});

test('Borrar un auto existente devuelve true', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newCar = await repository.saveCar(sampleCar);
    expect(newCar.id).toEqual(NEW_AUTOGENERATED_ID);
    await expect(repository.deleteCar(newCar)).resolves.toEqual(true);
    await expect(repository.getCarById(NEW_AUTOGENERATED_ID)).rejects.toThrow(CarNotFoundError);    
});

test('Borrar un auto sin parametros da error', async () => {
    await expect(repository.deleteCar()).rejects.toThrow(CarIdNotDefinedError);
});

test('Borrar un auto sin ID da error', async () => {
    await expect(repository.deleteCar({})).rejects.toThrow(CarIdNotDefinedError);
});

test('Borrar un auto con ID inexistente devuelve false', async () => {
    await expect(repository.deleteCar({ id: 1 })).resolves.toEqual(false);
});
