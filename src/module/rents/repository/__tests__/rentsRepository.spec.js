/// <reference types="Jest" />

const { Sequelize } = require('sequelize');
const ReserveRepository = require('../orm/rentsRepository');
const ReserveModel = require('../../model/rentModel');
const CarModel = require('../../../cars/model/carModel');
const ClientModel = require('../../../clients/model/clientModel');
const ReserveEntity = require('../../entity/reserve');
const ReserveNotFoundError = require('../orm/error/reserveNotFoundError');
const ReserveIdNotDefinedError = require('../orm/error/reserveIdNotDefinedError');
const createTestReserve = require('../../repository/__tests__/reserve.fixture');
const createTestCar = require('../../../cars/controller/__tests__/cars.fixture');
const createTestClient = require('../../../clients/controller/__tests__/client.fixture');

const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type ReserveRepository
 */
let repository;

const sampleReserve = new ReserveEntity({
    takeDay: '2021-05-06',
    returnDay: '2021-05-06',
    finalCost: 60000,
    payment: 'Cash',
    status: 'No',
    Car: { id: 1 },
    Client: { id: 1},
});

beforeEach(async (done) => {
    const reserve = ReserveModel.setup(sequelizeInstance);
    CarModel.setup(sequelizeInstance);
    ClientModel.setup(sequelizeInstance);
    reserve.belongsTo(CarModel);
    reserve.belongsTo(ClientModel);

    repository = new ReserveRepository(reserve, CarModel, ClientModel);
    await sequelizeInstance.sync({force: true});
    done();
});

test('Crea un alquiler cuando la entidad no tiene id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newReserve = await repository.rentCar(sampleReserve);
    expect(newReserve.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Actualiza un alquiler cuando la entidad tiene un id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newReserve = await repository.rentCar(sampleReserve);
    expect(newReserve.id).toEqual(NEW_AUTOGENERATED_ID);

    newReserve.finalCost = 30000;
    newReserve.Car = { id: 1 }; // Si no pongo esto, van a salir como undefined y va a saltar el error "cannot read id of undefined"
    newReserve.Client = { id: 1 };

    const modifiedReserve = await repository.rentCar(newReserve);
    expect(modifiedReserve.id).toEqual(NEW_AUTOGENERATED_ID);
    expect(modifiedReserve.finalCost).toEqual(30000);
});

test('Buscar un alquiler por ID', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newReserve = await repository.rentCar(sampleReserve);
    expect(newReserve.id).toEqual(NEW_AUTOGENERATED_ID);

    const reserve = await repository.getReserveById(1);
    expect(reserve.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Buscar todas las reservas de un cliente', async () => {
    const reserveWithoutId = createTestReserve();
    console.log(reserveWithoutId);
    const carWithId = createTestCar(1);
    const clientWithId = createTestClient(1);
    await CarModel.create(carWithId);
    await ClientModel.create(clientWithId);
    await repository.rentCar(reserveWithoutId);


    const reserve = await repository.getUserReserve(1);
    console.log(reserve);
    
});
