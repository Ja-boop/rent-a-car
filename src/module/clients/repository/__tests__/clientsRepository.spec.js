/// <reference types="Jest" />

const { Sequelize } = require('sequelize');
const ClientsRepository = require('../orm/clientsRepository');
const ClientModel = require('../../model/clientModel');
const ClientEntity = require('../../entity/client');
const ClientNotFoundError = require('../orm/error/clientNotFoundError');
const ClientIdNotDefinedError = require('../orm/error/clientIdNotDefinedError');

const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type ClientsRepository
 */
let repository;

const sampleClient = new ClientEntity ({
    name: "Miguel",
    lastName: "Lopez",
    identifierType: "DNI",
    identifierNumber: 84576215,
    nationality: "Argentina",
    address: "Calle Falsa 123",
    phone: 54123456,
    email: "miguel@gmail.com",
    birthday: "10/02/1985",
});

beforeAll(() => {
    const client = ClientModel.setup(sequelizeInstance);
    repository = new ClientsRepository(client);
});

beforeEach(async (done) => {
    await sequelizeInstance.sync({ force: true });
    done();
});

test('Crea un cliente cuando la entidad no tiene un id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newClient = await repository.saveClient(sampleClient);
    expect(newClient.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Modifica un cliente cuando la entidad ya tiene un id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newClient = await repository.saveClient(sampleClient);
    expect(newClient.id).toEqual(NEW_AUTOGENERATED_ID);

    newClient.name = 'Juan';
    const modifiedClient = await repository.saveClient(newClient);
    expect(modifiedClient.id).toEqual(NEW_AUTOGENERATED_ID);
    expect(modifiedClient.name).toEqual('Juan');
});

test('Busca un cliente por ID', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newClient = await repository.saveClient(sampleClient);
    expect(newClient.id).toEqual(NEW_AUTOGENERATED_ID);

    const client = await repository.getClientById(1);
    expect(client.id).toEqual(newClient.id);
});

test('Pedir todos los clientes', async () => {
    const FIRST_AUTOGENERATED_ID = 1;
    const firstClient = await repository.saveClient(sampleClient);
    expect(firstClient.id).toEqual(FIRST_AUTOGENERATED_ID);

    const SECOND_AUTOGENERATED_ID = 2;
    const secondClient = await repository.saveClient(sampleClient);
    expect(secondClient.id).toEqual(SECOND_AUTOGENERATED_ID);

    const clients = await repository.getAllClients();
    expect(clients).toHaveLength(2);
});

test('Borrar un cliente existente devuelve true', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newClient = await repository.saveClient(sampleClient);
    expect(newClient.id).toEqual(NEW_AUTOGENERATED_ID);

    await expect (repository.deleteClient(newClient)).resolves.toEqual(true);
    await expect (repository.getClientById(NEW_AUTOGENERATED_ID)).rejects.toThrow(ClientNotFoundError);
});

test('Llamar a deleteClient sin parametros da un error', async () => {
    await expect(repository.deleteClient()).rejects.toThrow(ClientIdNotDefinedError);
});

test('Llamar a deleteClient sin ID da un error', async () => {
    await expect(repository.deleteClient({})).rejects.toThrow(ClientIdNotDefinedError);
});

test('Llamar a deleteClient con ID inexistente devuelve false', async () => {
    await expect(repository.deleteClient({id: 1})).resolves.toEqual(false);
});
