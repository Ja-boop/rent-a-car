import { IDefinition } from "./definitions/IDefinition";
/**
 * Dependency injection container interface to expose
 */
export interface IDIContainer {
    get: <T>(serviceName: string) => T;
}
interface INamedDefinitions {
    [x: string]: IDefinition | any;
}
declare type DefinitionName = string;
/**
 * Dependency injection container
 */
export default class DIContainer implements IDIContainer {
    private definitions;
    private resolved;
    /**
     * Resolves dependency by name
     * @param name - string name of the dependency
     * @param parentDeps - array of parent dependencies (used to detect circular dependencies)
     */
    get<T>(name: string, parentDeps?: string[]): T;
    /**
     * Adds single dependency definition to the container
     * @param name - string name for the dependency
     * @param definition - raw value or instance of IDefinition
     */
    addDefinition(name: DefinitionName, definition: IDefinition | any): void;
    /**
     * Adds multiple dependency definitions to the container
     * @param definitions - named dependency object
     */
    addDefinitions(definitions: INamedDefinitions): void;
}
export {};
