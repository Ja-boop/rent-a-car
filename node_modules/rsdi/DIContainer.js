"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var DependencyIsMissingError_1 = __importDefault(require("./errors/DependencyIsMissingError"));
var BaseDefinition_1 = __importDefault(require("./definitions/BaseDefinition"));
var ValueDefinition_1 = __importDefault(require("./definitions/ValueDefinition"));
var CircularDependencyError_1 = __importDefault(require("./errors/CircularDependencyError"));
/**
 * Dependency injection container
 */
var DIContainer = /** @class */ (function () {
    function DIContainer() {
        this.definitions = {};
        this.resolved = {};
    }
    /**
     * Resolves dependency by name
     * @param name - string name of the dependency
     * @param parentDeps - array of parent dependencies (used to detect circular dependencies)
     */
    DIContainer.prototype.get = function (name, parentDeps) {
        if (parentDeps === void 0) { parentDeps = []; }
        if (!(name in this.definitions)) {
            throw new DependencyIsMissingError_1.default(name);
        }
        if (parentDeps.includes(name)) {
            throw new CircularDependencyError_1.default(name, parentDeps);
        }
        if (this.resolved[name] !== undefined) {
            return this.resolved[name];
        }
        var definition = this.definitions[name];
        this.resolved[name] = definition.resolve(this, __spreadArrays(parentDeps, [name]));
        return this.resolved[name];
    };
    /**
     * Adds single dependency definition to the container
     * @param name - string name for the dependency
     * @param definition - raw value or instance of IDefinition
     */
    DIContainer.prototype.addDefinition = function (name, definition) {
        if (!(definition instanceof BaseDefinition_1.default)) {
            definition = new ValueDefinition_1.default(definition);
        }
        this.definitions[name] = definition;
    };
    /**
     * Adds multiple dependency definitions to the container
     * @param definitions - named dependency object
     */
    DIContainer.prototype.addDefinitions = function (definitions) {
        var _this = this;
        Object.keys(definitions).map(function (name) {
            _this.addDefinition(name, definitions[name]);
        });
    };
    return DIContainer;
}());
exports.default = DIContainer;
//# sourceMappingURL=DIContainer.js.map